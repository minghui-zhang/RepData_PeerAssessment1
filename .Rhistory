# take raw data and add class as factor, clean up date columns, add vegetation indeces
clean_raw_data = function(data_raw, year) {
# turn class into a factor
data_raw$class <- as.factor(data_raw$class)
# specify that original 'year' in data is actually harvest year
data_raw$harvest_year <- data_raw$year
data <- select(data_raw, -year)
data_year <- data[data$harvest_year == year,]
# turn DOY into month
# data_year$date <- ms_to_date(data_year$system.time_start, timezone="America/Los_Angeles")
data_year$month <- month(as.Date(data_year$DayOfYear, origin = paste0(year, '-01-01')))
# remove data with no month
data_year <- data_year[complete.cases(data_year$month),]
# add EVI 2.5(NIR - red)/(NIR + 6red - 7.5blue + 1)
data_year$EVI <- 2.5*(data_year$sur_refl_b02 - data_year$sur_refl_b01)/
(data_year$sur_refl_b02 + 6*data_year$sur_refl_b01 - 7.5*data_year$sur_refl_b03 + 1)
# take out unnecessary columns
data_year <- select(data_year, -c(sur_refl_b01, sur_refl_b02, sur_refl_b03, sur_refl_b04, sur_refl_b05, sur_refl_b07, system.time_start))
return(data_year)
}
# turn output of clean_raw_data into wide format where
get_wide_data = function(data, year) {
#wide <- spread(data, DayOfYear, EVI)
data$DOY_round <- round(data$DayOfYear, digits = -1)
# <- data %>% dcast(EVI ~ DOY_round, fun = mean)
data <- data %>% group_by(DOY_round, point_id, class) %>%
summarize(EVI = mean(EVI)) %>%
spread(DOY_round, EVI) %>%
ungroup()
#dcast(... ~ DOY_round, value.var = "EVI", fun = mean)
return(data)
}
# clean the raw data (add EVI and month, get rid of unnecessary columns)
agsat <- clean_raw_data(agsat_raw, year) %>% select(-sur_refl_b06)
plos <- clean_raw_data(plos_raw, year) %>% select(-old_class)
agsat_wide <- get_wide_data(agsat, year) %>%
select(-c(point_id, class)) # only get the EVI timeseries information
plos_wide <- get_wide_data(plos, year) %>%
select(-c(point_id, class)) # only get the EVI timeseries information
print(head(agsat_wide))
print(head(plos_wide))
pca_agsat <- svd(scale(agsat_wide))
?approxm
?approx
?na.interpolation
install.packages('imputeTS')
?na.interpolation
library(imputeTS)
?na.interpolation
na.interpolation(c(1,2,NA,4))
install.packages('zoo')
install.packages("zoo")
library(zoo)
?na.approx
library(ggplot2)
library(dplyr)
library(lubridate)
library(reshape2)
library(tidyr)
library(imputeTS) # for linear interpolation, na.interpolation function
library(imputeTS)
na.interpolation(c(1,2,NA,4))
install.packages("imputeTS")
library(ggplot2)
library(dplyr)
library(lubridate)
library(reshape2)
library(tidyr)
library(imputeTS) # for linear interpolation, na.interpolation function
library(imputeTS
)
setwd("E:/Tutorials/JHU-Data-Science/Reproducible-Research/week2")
raw <- read.csv("activity.csv")
summary(cars)
View(raw)
str(raw$date)
# read in the data
raw <- read.csv("activity.csv", stringsAsFactors = FALSE)
#
# read in the data
raw <- read.csv("activity.csv", stringsAsFactors = FALSE)
#
str(raw)
as.Date(raw$date)
# read in the data
raw <- read.csv("activity.csv", stringsAsFactors = FALSE)
# add date
raw$date <- as.Date(raw$date)
#
View(raw)
str(raw)
# read in the data
raw <- read.csv("activity.csv", stringsAsFactors = FALSE)
# add date
raw$date_string <- raw$date
raw$date <- as.Date(raw$date)
View(raw)
# read in the data
raw <- read.csv("activity.csv")
# add date
raw$date_string <- raw$date
raw$date <- as.Date(raw$date)
str(raw)
?group_by
?summarize
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% select(steps) %>% summarize(sum)
# load packages
library(dplyr)
# read in the data
raw <- read.csv("activity.csv")
# add date
raw$date_string <- raw$date
raw$date <- as.Date(raw$date)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% select(steps) %>% summarize(sum)
?sum
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
View(total_steps)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
mean_total_steps <- mean(total_steps, na.rm = TRUE)
View(total_steps)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% select(steps) %>% summarize(sum(steps, na.rm = TRUE))
mean_total_steps <- mean(total_steps, na.rm = TRUE)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
mean_total_steps <- mean(total_steps[,1], na.rm = TRUE)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
mean_total_steps <- mean(total_steps[,2], na.rm = TRUE)
total_steps[,2]
as.numeric(total_steps[,2])
pull(total_steps[,2])
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
mean_total_steps <- mean(pull(total_steps[,2]), na.rm = TRUE)
?histogram
?hist
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector, na.rm = TRUE)
median_total_steps <- median(total_steps_vector, na.rm = TRUE)
# histogram of daily total steps
total_steps_plot <- hist(total_steps_vector)
print(total_steps_plot)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector, na.rm = TRUE)
median_total_steps <- median(total_steps_vector, na.rm = TRUE)
# histogram of daily total steps
total_steps_plot <- hist(total_steps_vector) + main("Daily Total Steps") + xlab("Daily Total Steps")
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector, na.rm = TRUE)
median_total_steps <- median(total_steps_vector, na.rm = TRUE)
# histogram of daily total steps
total_steps_plot <- hist(total_steps_vector, main = "Daily Total Steps")
print(total_steps_plot)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector, na.rm = TRUE)
median_total_steps <- median(total_steps_vector, na.rm = TRUE)
# histogram of daily total steps
total_steps_plot <- hist(total_steps_vector, main = "Daily Total Steps", xlab = "Steps")
print(total_steps_plot)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
View(mean_steps)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
plot(mean_steps_vector ~ intervals)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
plot(mean_steps_vector ~ intervals, type = "l")
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
plot(mean_steps_vector ~ intervals, type = "l", col = "blue", lwd = 2)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
plot(mean_steps_vector ~ intervals, type = "l", col = "blue", lwd = 2,
main = "Avg Daily Activity Pattern", xlab = "5 min interval number", ylab = "mean steps")
?which
?which.max
total_missing <- sum(is.na(raw$steps))
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
fill_info <- data.frame(interval = intervals, mean_steps = mean_steps_vector)
View(fill_info)
a <- c(1,2,3)
a{1}
a[1]
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
fill_info <- data.frame(interval = intervals, mean_steps = mean_steps_vector)
for (row_index in 1:length(raw)) {
row <- raw[row_index,]
print(row)
}
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
filled <- raw %>% group_by(interval) %>% mutate(avg = mean(steps, na.rm = T))
View(filled)
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
filled <- raw %>% group_by(interval) %>% mutate(avg = mean(steps, na.rm = T))
filled$steps[is.na(filled$steps)] <- filled$avg[is.na(filled$steps)]
View(filled)
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
filled <- raw %>% group_by(interval) %>% mutate(avg = mean(steps, na.rm = T))
filled$steps[is.na(filled$steps)] <- filled$avg[is.na(filled$steps)]
# compute total number of steps by date
total_steps <- filled %>% group_by(date_string) %>% summarize(sum(steps))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector)
median_total_steps <- median(total_steps_vector)
# histogram of daily total steps
hist(total_steps_vector, main = "Daily Total Steps", xlab = "Steps")
# load packages
library(dplyr)
# read in the data
raw <- read.csv("activity.csv")
# add date
raw$date_string <- raw$date
raw$date <- as.Date(raw$date)
# compute total number of steps by date
total_steps <- raw %>% group_by(date_string) %>% summarize(sum(steps, na.rm = TRUE))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector, na.rm = TRUE)
median_total_steps <- median(total_steps_vector, na.rm = TRUE)
# histogram of daily total steps
hist(total_steps_vector, main = "Daily Total Steps", xlab = "Steps")
print(mean_total_steps)
print(median_total_steps)
# compute mean number of steps by time interval
mean_steps <- raw %>% group_by(as.factor(interval)) %>% summarize(mean(steps, na.rm = TRUE))
# pull vector out of the tibble (mean_steps)
mean_steps_vector <- pull(mean_steps[,2])
intervals <- unique(raw$interval)
# calculate the 5 minute interval contains the maximum number of steps
max_interval <- intervals[which.max(mean_steps_vector)]
# plot the mean steps per 5 minute interval
plot(mean_steps_vector ~ intervals, type = "l", col = "blue", lwd = 2,
main = "Average Daily Activity Pattern", xlab = "5 min interval number", ylab = "mean steps")
# calculate number of missing values
total_missing <- sum(is.na(raw$steps))
# fill in missing values using the mean for that 5 min interval
filled <- raw %>% group_by(interval) %>% mutate(avg = mean(steps, na.rm = T))
filled$steps[is.na(filled$steps)] <- filled$avg[is.na(filled$steps)]
# compute total number of steps by date
total_steps <- filled %>% group_by(date_string) %>% summarize(sum(steps))
# pull a vector out of the tibble (total_steps)
total_steps_vector <- pull(total_steps[,2])
# calculate mean and median of daily total steps
mean_total_steps <- mean(total_steps_vector)
median_total_steps <- median(total_steps_vector)
# histogram of daily total steps
hist(total_steps_vector, main = "Daily Total Steps", xlab = "Steps")
print(mean_total_steps)
print(median_total_steps)
print(weekdays(filled$date))
?weekdays
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
View(filled)
str(filled)
# add variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
View(filled)
str(filled$day_type)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>% group_by(as.factor(interval), day_type) %>% summarize(mean(steps))
View(mean_steps)
str(mean_steps)
as.data.frame(mean_steps)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.factor(interval), day_type) %>%
summarize(mean(steps)) %>%
as.data.frame
View(mean_steps)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.factor(interval), day_type) %>%
summarize(mean(steps)) %>%
as.data.frame
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.factor(interval), day_type) %>%
summarize(mean(steps))
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.factor(interval), day_type) %>%
summarize(mean(steps)) %>%
as.data.frame
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
?names
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
View(mean_steps)
?facet_grid
library(ggplot2)
?facet_grid
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(day_type)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = interval, y = steps)) +
geom_line()
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = interval, y = steps)) +
geom_line() +
facet_wrap(day_type)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = interval, y = steps)) +
geom_line() +
facet_wrap(~day_type)
?facet_wrap
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = interval, y = steps)) +
geom_line() +
facet_wrap(~day_type, nrow = 2)
str(mean_steps)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = as.numeric(interval), y = steps)) +
geom_line() +
facet_wrap(~day_type, nrow = 2)
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = as.numeric(interval), y = steps, col = day_type)) +
geom_line() +
facet_wrap(~day_type, nrow = 2) +
xlab("Interval") +
ylab("Number of steps")
?geom_line
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = as.numeric(interval), y = steps, col = day_type)) +
geom_line(size = 2) +
facet_wrap(~day_type, nrow = 2) +
xlab("Interval") +
ylab("Number of steps")
# add factor variable day_type containing weekend or weekday
filled$day_type <- ifelse(weekdays(filled$date) %in% c("Saturday", "Sunday"), "weekend", "weekday") %>%             as.factor
# calculate average steps per interval
# compute mean number of steps by time interval
mean_steps <- filled %>%
group_by(as.character(interval), as.character(day_type)) %>%
summarize(mean(steps)) %>%
as.data.frame
# rename the columns
names(mean_steps) <- c("interval", "day_type", "steps")
# panel plot
ggplot(mean_steps, aes(x = as.numeric(interval), y = steps, col = day_type)) +
geom_line(size = 1) +
facet_wrap(~day_type, nrow = 2) +
xlab("Interval") +
ylab("Number of steps")
setwd("E:/Tutorials/JHU-Data-Science/Reproducible-Research/week2/RepData_PeerAssessment1")
